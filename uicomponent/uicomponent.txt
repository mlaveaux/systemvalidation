sort Product = struct Coffee|HotWater|ColdWater;
sort CoffeeSupplement = struct Milk|Sugar|CoffeeBeans;
sort Extra = struct Cup;

sort Value = struct tencent|fivecent|twentycent|fiftycent|oneeuro|twoeuro; 
map value : Value -> Pos;
var v : Value;
eqn (v==tencent) -> value(v) = 10;
    (v==fivecent) -> value(v) = 5;
    (v==twentycent) -> value(v) = 20;
    (v==fiftycent) -> value(v) = 50;
    (v==oneeuro) -> value(v) = 100;
    (v==twoeuro) -> value(v) = 200;

act
    % User interface to controller.
    pressed : Product;
    pressed : CoffeeSupplement;
    cancel;

    % Controller to user interface.
    show_money : Nat;

    set_selectable : Product # Bool;
    set_selectable : CoffeeSupplement # Bool;

    set_empty : Product # Bool;
    set_empty : CoffeeSupplement # Bool;
    set_empty : Extra # Bool;

    % Machine to controller.
    coin : Value;
    return_last_coin : Value;

    % Controller to machine.

    % Actions between controller components.

proc
    CoffeeSelect = set_selectable(Milk, true).set_selectable(Sugar, true)
        .set_selectable(Coffee, false).set_selectable(HotWater, false)
        .set_selectable(ColdWater, false).(pressed(Milk) + pressed(Sugar) + tau);

    Reset = set_selectable(Milk, false).set_selectable(Sugar, false)
        .set_selectable(Coffee, true).set_selectable(HotWater, true)
        .set_selectable(ColdWater, true);

    ProductSelect = (pressed(Coffee).CoffeeSelect + pressed(HotWater) + pressed(ColdWater)).CountMoney(0);

    Continue = tau.Continue;

    CountMoney(total : Nat) = sum v:Value.(total < 100 && value(v)+total <= 100) -> (coin(v).CountMoney(total + value(v)) + cancel.UIComponent) <> 
        (total < 100 && value(v)+total > 100) -> (coin(v).return_last_coin(v).CountMoney(total))<>Continue;

    UIComponent = Reset.ProductSelect;

    Start = UIComponent;

init
  Start;
