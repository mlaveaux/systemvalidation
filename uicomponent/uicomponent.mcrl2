sort Product = struct Coffee|HotWater|ColdWater;
sort CoffeeSupplement = struct Milk|Sugar|CoffeeBeans;
sort Extra = struct Cup;

act
  % User interface to controller.
  pressed : Product;
  pressed : CoffeeSupplement;
  cancel;

  % Controller to user interface.
  showMoney : Int;

  setSelectable : Product # Bool;
  setSelectable : CoffeeSupplement # Bool;

  setEmpty : Product # Bool;
  setEmpty : CoffeeSupplement # Bool;
  setEmpty : Extra # Bool;

  % Machine to controller.
  coin : Int;

  % Controller to machine.

  % Actions between controller components.
  accept;

proc
  CoffeeSelect = setSelectable(Milk, true).setSelectable(Sugar, true)
	.setSelectable(Coffee, false).setSelectable(HotWater, false)
	.setSelectable(ColdWater, false).(pressed(Milk) + pressed(Sugar) + tau);

  Reset = setSelectable(Milk, false).setSelectable(Sugar, false)
	.setSelectable(Coffee, true).setSelectable(HotWater, true)
	.setSelectable(ColdWater, true);

  ProductSelect = (pressed(Coffee).CoffeeSelect + pressed(HotWater) + pressed(ColdWater)).CountMoney(0);

  Continue = tau.Continue;

  CountMoney(total : Nat) = if(total < 100) -> sum value : Nat.(coin(value).CountMoney(total + value) + cancel.UIComponent) <> Continue;

  UIComponent = Reset.ProductSelect;

  Start = UIComponent;

init
  Start;